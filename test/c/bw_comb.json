{
	"wrapper": [
		"y = bw_comb (max_delay, x, delay_ff, delay_fb, coeff_blend, coeff_ff, coeff_fb) { ",
		"    y.init, y = bw_comb_(max_delay, fs, x.init, x, delay_ff, delay_fb, coeff_blend, coeff_ff, coeff_fb); ",
		"} "
	],

	"header": "#include \"bw_comb.h\"",
	
	"block_name": "bw_comb_",
	"block_inputs": [
		{
			"type": "float32",
			"info": "max_delay"
		},
		{
			"type": "float32",
			"info": "fs",
			"updaterate": "fs"
		},
		{
			"type": "float32",
			"info": "x_0",
			"updaterate": "const"
		},
		{
			"type": "float32",
			"info": "x"
		},
		{
			"type": "float32",
			"name": "delay_ff",
			"isParameter": true
		},
		{
			"type": "float32",
			"name": "delay_fb",
			"isParameter": true
		},
		{
			"type": "float32",
			"name": "coeff_blend",
			"isParameter": true
		},
		{
			"type": "float32",
			"name": "coeff_ff",
			"isParameter": true
		},
		{
			"type": "float32",
			"name": "coeff_fb",
			"isParameter": true
		}
	],
	"block_outputs": [
		{ 
			"type": "float32",
			"info": "initial_state"
		},
		{
			"type": "float32",
			"info": "y"
		}
	],


	"state": "bw_comb_state",
	"coeffs": "bw_comb_coeffs",
	"prefix": "bw_comb",

	"init": {
		"f_name": "bw_comb_init",
		"f_outputs" : [],
		"f_inputs" : [
			"coeffs",
			"i0"
		]
	},

	"set_sample_rate": {
		"f_name": "bw_comb_set_sample_rate",
		"f_outputs": [],
		"f_inputs": [
			"coeffs",
			"i1"
		]
	},

	"mem_req": {
		"f_name": "bw_comb_mem_req",
		"f_outputs": [
			"size"
		],
		"f_inputs": [
			"ceffs"
		]
	},

	"mem_set": {
		"f_name": "bw_comb_mem_set",
		"f_outputs": [],
		"f_inputs": [
			"ceffs",
			"state",
			"mem"
		]
	},

	"reset_coeffs": {
		"f_name": "bw_comb_reset_coeffs",
		"f_outputs" : [],
		"f_inputs" : [
			"coeffs"
		]
	},

	"reset_state": {
		"f_name": "bw_comb_reset_state",
		"f_outputs" : [
			"o0"
		],
		"f_inputs" : [
			"coeffs",
			"state",
			"i2"
		]
	},

	"update_coeffs_ctrl": {
		"f_name": "bw_comb_update_coeffs_ctrl",
		"f_outputs" : [],
		"f_inputs" : [
			"coeffs"
		]
	},

	"update_coeffs_audio": {
		"f_name": "bw_comb_update_coeffs_audio",
		"f_outputs" : [],
		"f_inputs" : [
			"coeffs"
		]
	},

	"process1": {
		"f_name": "bw_comb_process1",
		"f_outputs": [
			"o1"
		],
		"f_inputs": [
			"coeffs",
			"state",
			"i3"
		]
	}
}