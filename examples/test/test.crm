alpha = 0.9;

Vout = tonestackauto(Vin, bass,mid,treble) {


	Rin = 38000;
	C1 = 0.00000000025;
	R1 = 100000;
	Rtreble1 = -250000 * treble + 250000;
	Rtreble2 = 250000 * treble;
	C2 = 0.0000001;
	C3 = 0.000000047;
	Rbass = 250000 * bass;
	Rmiddle = 10000 * mid;
	RL = 1000000;
	kd = fs * alpha + fs;
	IRin_VRin_B0 = 1 / Rin;
	IR1_VR1_B0 = 1 / R1;
	IRtreble1_VRtreble1_B0 = 1 / Rtreble1;
	IRtreble2_VRtreble2_B0 = 1 / Rtreble2;
	IRbass_VRbass_B0 = 1 / Rbass;
	IRmiddle_VRmiddle_B0 = 1 / Rmiddle;
	IRL_VRL_B0 = 1 / RL;
	
	DIC1_VC1_0 = (-kd) * C1;
	DIC2_VC2_1 = (-kd) * C2;
	DIC3_VC3_2 = (-kd) * C3;
	V5_V5_15 = (-IRbass_VRbass_B0) - IRmiddle_VRmiddle_B0;
	V1_V1_17 = DIC1_VC1_0 - IR1_VR1_B0;
	Vout_Vout_18 = (-IRL_VRL_B0) - IRtreble1_VRtreble1_B0;
	V2_V2_18 = DIC1_VC1_0 - IRtreble1_VRtreble1_B0;
	Vout_Vout_19 = Vout_Vout_18 - IRtreble2_VRtreble2_B0;
	V4_V4_19 = (-IRbass_VRbass_B0) - IRtreble2_VRtreble2_B0;
	V4_V4_20 = V4_V4_19 + DIC2_VC2_1;
	V3_V3_20 = (-IR1_VR1_B0) + DIC2_VC2_1;
	V5_V5_21 = V5_V5_15 + DIC3_VC3_2;
	V3_V3_21 = V3_V3_20 + DIC3_VC3_2;
	V1_V1_22 = V1_V1_17 - IRin_VRin_B0;
	rev_V1_V1 = 1 / V1_V1_22;
	V1_V2_23 = (-DIC1_VC1_0) * rev_V1_V1;
	V1_V3_23 = IR1_VR1_B0 * rev_V1_V1;
	V1_Vin_23 = IRin_VRin_B0 * rev_V1_V1;
	V1_dVC1_xz1_23 = (-C1) * rev_V1_V1;
	V2_V2_23 = V2_V2_18 + V1_V2_23 * DIC1_VC1_0;
	V2_V3_23 = V1_V3_23 * DIC1_VC1_0;
	V2_Vin_23 = V1_Vin_23 * DIC1_VC1_0;
	V2_dVC1_xz1_23 = C1 + V1_dVC1_xz1_23 * DIC1_VC1_0;
	V3_V2_23 = (-V1_V2_23) * IR1_VR1_B0;
	V3_V3_23 = V3_V3_21 - V1_V3_23 * IR1_VR1_B0;
	V3_Vin_23 = (-V1_Vin_23) * IR1_VR1_B0;
	V3_dVC1_xz1_23 = (-V1_dVC1_xz1_23) * IR1_VR1_B0;
	rev_V3_V3 = 1 / V3_V3_23;
	V3_V2_24 = V3_V2_23 * rev_V3_V3;
	V3_V5_24 = (-DIC3_VC3_2) * rev_V3_V3;
	V3_Vin_24 = V3_Vin_23 * rev_V3_V3;
	V3_V4_24 = (-DIC2_VC2_1) * rev_V3_V3;
	V3_dVC1_xz1_24 = V3_dVC1_xz1_23 * rev_V3_V3;
	V3_dVC2_xz1_24 = (-C2) * rev_V3_V3;
	V3_dVC3_xz1_24 = (-C3) * rev_V3_V3;
	V4_V2_24 = V3_V2_24 * DIC2_VC2_1;
	V4_V5_24 = IRbass_VRbass_B0 + V3_V5_24 * DIC2_VC2_1;
	V4_Vin_24 = V3_Vin_24 * DIC2_VC2_1;
	V4_V4_24 = V4_V4_20 + V3_V4_24 * DIC2_VC2_1;
	V4_dVC1_xz1_24 = V3_dVC1_xz1_24 * DIC2_VC2_1;
	V4_dVC2_xz1_24 = C2 + V3_dVC2_xz1_24 * DIC2_VC2_1;
	V4_dVC3_xz1_24 = V3_dVC3_xz1_24 * DIC2_VC2_1;
	V5_V2_24 = V3_V2_24 * DIC3_VC3_2;
	V5_V5_24 = V5_V5_21 + V3_V5_24 * DIC3_VC3_2;
	V5_Vin_24 = V3_Vin_24 * DIC3_VC3_2;
	V5_V4_24 = IRbass_VRbass_B0 + V3_V4_24 * DIC3_VC3_2;
	V5_dVC1_xz1_24 = V3_dVC1_xz1_24 * DIC3_VC3_2;
	V5_dVC2_xz1_24 = V3_dVC2_xz1_24 * DIC3_VC3_2;
	V5_dVC3_xz1_24 = C3 + V3_dVC3_xz1_24 * DIC3_VC3_2;
	V2_V2_24 = V2_V2_23 - V3_V2_24 * V2_V3_23;
	V2_V5_24 = (-V3_V5_24) * V2_V3_23;
	V2_Vin_24 = V2_Vin_23 - V3_Vin_24 * V2_V3_23;
	V2_V4_24 = (-V3_V4_24) * V2_V3_23;
	V2_dVC1_xz1_24 = V2_dVC1_xz1_23 - V3_dVC1_xz1_24 * V2_V3_23;
	V2_dVC2_xz1_24 = (-V3_dVC2_xz1_24) * V2_V3_23;
	V2_dVC3_xz1_24 = (-V3_dVC3_xz1_24) * V2_V3_23;
	rev_V2_V2 = 1 / V2_V2_24;
	V2_Vout_25 = IRtreble1_VRtreble1_B0 * rev_V2_V2;
	V2_V5_25 = V2_V5_24 * rev_V2_V2;
	V2_Vin_25 = V2_Vin_24 * rev_V2_V2;
	V2_V4_25 = V2_V4_24 * rev_V2_V2;
	V2_dVC1_xz1_25 = V2_dVC1_xz1_24 * rev_V2_V2;
	V2_dVC2_xz1_25 = V2_dVC2_xz1_24 * rev_V2_V2;
	V2_dVC3_xz1_25 = V2_dVC3_xz1_24 * rev_V2_V2;
	V5_Vout_25 = (-V2_Vout_25) * V5_V2_24;
	V5_V5_25 = V5_V5_24 - V2_V5_25 * V5_V2_24;
	V5_Vin_25 = V5_Vin_24 - V2_Vin_25 * V5_V2_24;
	V5_V4_25 = V5_V4_24 - V2_V4_25 * V5_V2_24;
	V5_dVC1_xz1_25 = V5_dVC1_xz1_24 - V2_dVC1_xz1_25 * V5_V2_24;
	V5_dVC2_xz1_25 = V5_dVC2_xz1_24 - V2_dVC2_xz1_25 * V5_V2_24;
	V5_dVC3_xz1_25 = V5_dVC3_xz1_24 - V2_dVC3_xz1_25 * V5_V2_24;
	V4_Vout_25 = IRtreble2_VRtreble2_B0 - V2_Vout_25 * V4_V2_24;
	V4_V5_25 = V4_V5_24 - V2_V5_25 * V4_V2_24;
	V4_Vin_25 = V4_Vin_24 - V2_Vin_25 * V4_V2_24;
	V4_V4_25 = V4_V4_24 - V2_V4_25 * V4_V2_24;
	V4_dVC1_xz1_25 = V4_dVC1_xz1_24 - V2_dVC1_xz1_25 * V4_V2_24;
	V4_dVC2_xz1_25 = V4_dVC2_xz1_24 - V2_dVC2_xz1_25 * V4_V2_24;
	V4_dVC3_xz1_25 = V4_dVC3_xz1_24 - V2_dVC3_xz1_25 * V4_V2_24;
	Vout_Vout_25 = Vout_Vout_19 - V2_Vout_25 * IRtreble1_VRtreble1_B0;
	Vout_V5_25 = (-V2_V5_25) * IRtreble1_VRtreble1_B0;
	Vout_Vin_25 = (-V2_Vin_25) * IRtreble1_VRtreble1_B0;
	Vout_V4_25 = IRtreble2_VRtreble2_B0 - V2_V4_25 * IRtreble1_VRtreble1_B0;
	Vout_dVC1_xz1_25 = (-V2_dVC1_xz1_25) * IRtreble1_VRtreble1_B0;
	Vout_dVC2_xz1_25 = (-V2_dVC2_xz1_25) * IRtreble1_VRtreble1_B0;
	Vout_dVC3_xz1_25 = (-V2_dVC3_xz1_25) * IRtreble1_VRtreble1_B0;
	rev_V4_V4 = 1 / V4_V4_25;
	V4_V5_26 = V4_V5_25 * rev_V4_V4;
	V4_Vin_26 = V4_Vin_25 * rev_V4_V4;
	V4_Vout_26 = V4_Vout_25 * rev_V4_V4;
	V4_dVC1_xz1_26 = V4_dVC1_xz1_25 * rev_V4_V4;
	V4_dVC2_xz1_26 = V4_dVC2_xz1_25 * rev_V4_V4;
	V4_dVC3_xz1_26 = V4_dVC3_xz1_25 * rev_V4_V4;
	V5_V5_26 = V5_V5_25 - V4_V5_26 * V5_V4_25;
	V5_Vin_26 = V5_Vin_25 - V4_Vin_26 * V5_V4_25;
	V5_Vout_26 = V5_Vout_25 - V4_Vout_26 * V5_V4_25;
	V5_dVC1_xz1_26 = V5_dVC1_xz1_25 - V4_dVC1_xz1_26 * V5_V4_25;
	V5_dVC2_xz1_26 = V5_dVC2_xz1_25 - V4_dVC2_xz1_26 * V5_V4_25;
	V5_dVC3_xz1_26 = V5_dVC3_xz1_25 - V4_dVC3_xz1_26 * V5_V4_25;
	Vout_V5_26 = Vout_V5_25 - V4_V5_26 * Vout_V4_25;
	Vout_Vin_26 = Vout_Vin_25 - V4_Vin_26 * Vout_V4_25;
	Vout_Vout_26 = Vout_Vout_25 - V4_Vout_26 * Vout_V4_25;
	Vout_dVC1_xz1_26 = Vout_dVC1_xz1_25 - V4_dVC1_xz1_26 * Vout_V4_25;
	Vout_dVC2_xz1_26 = Vout_dVC2_xz1_25 - V4_dVC2_xz1_26 * Vout_V4_25;
	Vout_dVC3_xz1_26 = Vout_dVC3_xz1_25 - V4_dVC3_xz1_26 * Vout_V4_25;
	rev_V5_V5 = 1 / V5_V5_26;
	V5_Vin_27 = V5_Vin_26 * rev_V5_V5;
	V5_Vout_27 = V5_Vout_26 * rev_V5_V5;
	V5_dVC1_xz1_27 = V5_dVC1_xz1_26 * rev_V5_V5;
	V5_dVC2_xz1_27 = V5_dVC2_xz1_26 * rev_V5_V5;
	V5_dVC3_xz1_27 = V5_dVC3_xz1_26 * rev_V5_V5;
	Vout_Vin_27 = Vout_Vin_26 - V5_Vin_27 * Vout_V5_26;
	Vout_Vout_27 = Vout_Vout_26 - V5_Vout_27 * Vout_V5_26;
	Vout_dVC1_xz1_27 = Vout_dVC1_xz1_26 - V5_dVC1_xz1_27 * Vout_V5_26;
	Vout_dVC2_xz1_27 = Vout_dVC2_xz1_26 - V5_dVC2_xz1_27 * Vout_V5_26;
	Vout_dVC3_xz1_27 = Vout_dVC3_xz1_26 - V5_dVC3_xz1_27 * Vout_V5_26;
	rev_Vout_Vout = 1 / Vout_Vout_27;
	Vout_Vin_28 = Vout_Vin_27 * rev_Vout_Vout;
	Vout_dVC1_xz1_28 = Vout_dVC1_xz1_27 * rev_Vout_Vout;
	Vout_dVC2_xz1_28 = Vout_dVC2_xz1_27 * rev_Vout_Vout;
	Vout_dVC3_xz1_28 = Vout_dVC3_xz1_27 * rev_Vout_Vout;
	

	Vout = -Vout_Vin_28 * Vin - Vout_dVC1_xz1_28 * dVC1_xz1 - Vout_dVC2_xz1_28 * dVC2_xz1 - Vout_dVC3_xz1_28 * dVC3_xz1;
	V5 = -V5_Vout_27 * Vout - V5_Vin_27 * Vin - V5_dVC1_xz1_27 * dVC1_xz1 - V5_dVC2_xz1_27 * dVC2_xz1 - V5_dVC3_xz1_27 * dVC3_xz1;
	V4 = -V4_V5_26 * V5 - V4_Vout_26 * Vout - V4_Vin_26 * Vin - V4_dVC1_xz1_26 * dVC1_xz1 - V4_dVC2_xz1_26 * dVC2_xz1 - V4_dVC3_xz1_26 * dVC3_xz1;
	V2 = -V2_V4_25 * V4 - V2_V5_25 * V5 - V2_Vout_25 * Vout - V2_Vin_25 * Vin - V2_dVC1_xz1_25 * dVC1_xz1 - V2_dVC2_xz1_25 * dVC2_xz1 - V2_dVC3_xz1_25 * dVC3_xz1;
	V3 = -V3_V2_24 * V2 - V3_V4_24 * V4 - V3_V5_24 * V5 - V3_Vin_24 * Vin - V3_dVC1_xz1_24 * dVC1_xz1 - V3_dVC2_xz1_24 * dVC2_xz1 - V3_dVC3_xz1_24 * dVC3_xz1;
	V1 = -V1_V3_23 * V3 - V1_V2_23 * V2 - V1_Vin_23 * Vin - V1_dVC1_xz1_23 * dVC1_xz1;
	VRin = V1 - Vin;
	VC3 = -V3 + V5;
	VC2 = -V3 + V4;
	VRtreble2 = -V4 + Vout;
	VRtreble1 = V2 - Vout;
	VR1 = V1 - V3;
	VC1 = -V1 + V2;
	VRmiddle = V5;
	VRbass = V4 - V5;
	VRL = Vout;
	IRtreble2 = IRtreble2_VRtreble2_B0 * VRtreble2;
	IRtreble1 = IRtreble1_VRtreble1_B0 * VRtreble1;
	IR1 = IR1_VR1_B0 * VR1;
	IRin = IRin_VRin_B0 * VRin;
	IC3 = -DIC3_VC3_2 * VC3 - C3 * dVC3_xz1;
	IC2 = -DIC2_VC2_1 * VC2 - C2 * dVC2_xz1;
	IC1 = -DIC1_VC1_0 * VC1 - C1 * dVC1_xz1;
	IRmiddle = IRmiddle_VRmiddle_B0 * VRmiddle;
	IRbass = IRbass_VRbass_B0 * VRbass;
	IRL = IRL_VRL_B0 * VRL;
	dVC3 = kd * VC3 - dVC3_xz1;
	dVC2 = kd * VC2 - dVC2_xz1;
	dVC1 = kd * VC1 - dVC1_xz1;
	
	VC1_z1 = delay1(VC1)
	VC2_z1 = delay1(VC2)
	VC3_z1 = delay1(VC3)
	dVC1_z1 = delay1(dVC1)
	dVC2_z1 = delay1(dVC2)
	dVC3_z1 = delay1(dVC3)

	@VC1_z1 = 0
	@VC2_z1 = 0
	@VC3_z1 = 0
	@dVC1_z1 = 0
	@dVC2_z1 = 0
	@dVC3_z1 = 0

	@Rin = 38000
	@C1 = 0.00000000025
	@R1 = 100000
	@Rtreble1 = 250000*(-treble+1)
	@Rtreble2 = 250000*treble
	@C2 = 0.0000001
	@C3 = 0.000000047
	@Rbass = 250000*bass
	@Rmiddle = 10000*mid
	@RL = 1000000
	@Vout = 0
	@V5 = 0
	@V4 = 0
	@V3 = 0
	@V2 = 0
	@V1 = 0
	@VRin = 0
	@VC3 = 0
	@VC2 = 0
	@VR1 = 0
	@VC1 = 0
	@VRtreble2 = 0
	@VRtreble1 = 0
	@VRmiddle = 0
	@VRbass = 0
	@VRL = 0
	@IRin = 0
	@IRtreble2 = 0
	@IRtreble1 = 0
	@IR1 = 0
	@IC3 = 0
	@IC2 = 0
	@IC1 = 0
	@IRmiddle = 0
	@IRbass = 0
	@IRL = 0

	dVC1_xz1 = kd*VC1_z1+alpha*dVC1_z1
	dVC2_xz1 = kd*VC2_z1+alpha*dVC2_z1
	dVC3_xz1 = kd*VC3_z1+alpha*dVC3_z1

}
