var Plugin = {
	init: function () {
		this.fs = 0;
		this.firstRun = 1;

		{{~it.constant_rate:c}}{{=c}};
		{{~}}

		this.params = [{{=it.control_inputs.map(c => '"' + c + '"').join(", ")}}];

		{{~it.init:d}}
		{{=d}};{{~}}

		{{~it.control_inputs:c}}
		this.{{=c}}_z1 = 0;
		this.{{=c}}_CHANGED = true;
		{{~}}
	},

	reset: function () {
		this.firstRun = 1
	},

	setSampleRate: function (sampleRate) {
		this.fs = sampleRate;
		{{~it.sampling_rate:s}}{{=s}};
		{{~}}
	},

	process: function ({{=it.audio_inputs.concat(it.outputs).join(', ')}}, nSamples) {
		if (this.firstRun) {{{~it.control_inputs:c}}
			this.{{=c}}_CHANGED = true;{{~}}
		}
		else {{{~it.control_inputs:c}}
			this.{{=c}}_CHANGED = this.{{=c}} != this.{{=c}}_z1;{{~}}
		}

		{{~it.controls_rate:c}}
		if ({{=Array.from(c.set).map(e => "this." + e + "_CHANGED").join(' | ')}}) {{{~c.stmts: s}}
			{{=s}};{{~}}
		}{{~}}
		{{~it.control_inputs:c}}
		this.{{=c}}_CHANGED = false;{{~}}

		if (this.firstRun) { {{~it.reset1:r}}
			{{=r}};{{~}}
			{{~it.reset2:r}}
			{{=r}};{{~}}
		}

		for (let i = 0; i < nSamples; i++) {
			{{~it.audio_rate: a}}
			{{=a}};{{~}}
			
			{{~it.delay_updates:u}}{{=u}};
			{{~}}
			{{~it.output_updates:u}}
			{{=u}};{{~}}
		}

		{{~it.control_inputs:c}}
		this.{{=c}}_z1 = this.{{=c}};{{~}}
		this.firstRun = 0;
	}
}

// Static part
class PluginProcessor extends AudioWorkletProcessor {
	constructor () {

		super();
		this.instance = Object.create(Plugin);
		this.instance.init();
		this.instance.setSampleRate(sampleRate);
		this.instance.reset();

		this.port.onmessage = (e) => {
			if (e.data.type == "changeInstance") {
				eval(e.data.value)
				this.instance = Object.create(Plugin);
				this.instance.init();
				this.instance.setSampleRate(sampleRate);
				this.instance.reset();
			}
			else if (e.data.type == "paramChange") {
				this.instance[e.data.id] = e.data.value
			}
		}
	}
	process (inputs, outputs, parameters) {

		var input = inputs[0];
		var output = outputs[0];
		let nSamples = Math.min(input.length >= 1 ? input[0].length : 0, output[0].length)
		


		this.instance.process({{=it.audio_inputs.map((ii, i) => "input[" + i + "]")}}{{?it.audio_inputs.length > 0}}, {{?}} {{=it.outputs.map((ii, i) => "output[" + i + "]")}}, nSamples);

		return true;
	}

	static get parameterDescriptors() {
		return [];
	}
}

registerProcessor("PluginProcessor", PluginProcessor);
