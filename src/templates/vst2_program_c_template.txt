#include "vst2_{{=it.class_name}}.h"


{{~it.constant_rate:c}}static const float {{=c.left}} = {{=c.right}};
{{~}}

void {{=it.class_name}}::reset()
{
	firstRun = 1;
}

void {{=it.class_name}}::setSampleRate(float sampleRate)
{
	fs = sampleRate;
	{{~it.sampling_rate:s}}{{?s.is_used_locally}}static const float {{?}}{{=s.left}} = {{=s.right}};
	{{~}}
}

void {{=it.class_name}}::process({{=it.audio_inputs.concat(it.outputs).map(x => 'float *' + x).join(', ')}}, int nSamples)
{
	if (firstRun) {{{~it.control_inputs:c}}
		{{=c}}_CHANGED = {{=c}} = 1;{{~}}
	}
	else {{{~it.control_inputs:c}}
		{{=c}}_CHANGED = {{=c}} != {{=c}}_z1;{{~}}
	}
	{{~it.controls_rate:c}}
	if ({{=Array.from(c.set).map(e => e + "_CHANGED").join(' | ')}}) {{{~c.stmts: s}}
		{{?s.is_used_locally}}static const float {{?}}{{=s.left}} = {{=s.right}};{{~}}
	}{{~}}
	{{~it.control_inputs:c}}
	{{=c}}_CHANGED = 0;{{~}}

	if (firstRun) {{{~it.reset1:r}}
		{{?r.is_used_locally}}static const float {{?}}{{=r.left}} = {{=r.right}};{{~}}
		{{~it.reset2:r}}
		{{?r.is_used_locally}}static const float {{?}}{{=r.left}} = {{=r.right}};{{~}}
	}

	for (int i = 0; i < nSamples; i++) {
		{{~it.audio_rate: a}}
		{{?a.is_used_locally}}const float {{?}}{{=a.left}} = {{=a.right}};{{~}}
		
		{{~it.delay_updates:u}}{{=u.left}} = {{=u.right}};
		{{~}}
		{{~it.output_updates:u}}
		{{=u.left}}[i] = {{=u.right}};{{~}}
	}

	{{~it.control_inputs:c}}
	{{=c}}_z1 = {{=c}};{{~}}
	firstRun = 0;
}

{{~it.control_inputs: c}}
float {{=it.class_name}}::get{{=c}}() {
	return {{=c}};
}
void {{=it.class_name}}::set{{=c}}(float value) {
	{{=c}} = value;
}
{{~}}