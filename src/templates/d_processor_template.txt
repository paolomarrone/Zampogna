struct {{=it.class_name}}
{
nothrow:
public:
@nogc:

    {{~it.constant_rate:c}}enum float {{=c}};
    {{~}}

    void setSampleRate(float sampleRate)
    {
        fs = sampleRate;
        {{~it.sampling_rate:s}}{{=s}};
        {{~}}
    }

    void reset()
    {
        firstRun = 1;
    }

    void process({{=it.audio_inputs.concat(it.outputs).map(x => 'float *' + x).join(', ')}}, int nSamples)
    {
        if (firstRun) 
        {
            {{~it.control_inputs:c}}{{=c}}_CHANGED = 1;
            {{~}}
        }
        else {{{~it.control_inputs:c}}
            {{=c}}_CHANGED = {{=c}} != {{=c}}_z1;{{~}}
        }
        {{~it.controls_rate:c}}
        if ({{=Array.from(c.set).map(e => e + "_CHANGED").join(' | ')}}) {{{~c.stmts: s}}
            {{=s}};{{~}}
        }{{~}}
        {{~it.control_inputs:c}}
        {{=c}}_CHANGED = 0;{{~}}

        if (firstRun) {{{~it.reset1:r}}
            {{=r}};{{~}}
            {{~it.reset2:r}}
            {{=r}};{{~}}
        }

        for (int i = 0; i < nSamples; i++) {
            {{~it.audio_rate: a}}
            {{=a}};{{~}}

            {{~it.delay_updates:u}}{{=u}};
            {{~}}
            {{~it.output_updates:u}}
            {{=u}};{{~}}
        }

        {{~it.control_inputs:c}}
        {{=c}}_z1 = {{=c}};{{~}}
        firstRun = 0;
    }

    {{~it.control_inputs:c}}
    float get{{=c}}()
    {
        return {{=c}};
    }
    void set{{=c}}(float value)
    {
        {{=c}} = value;
    }
    {{~}}

private:

    {{~it.init:d}}
    float {{=d}};{{~}}

    {{~it.control_inputs:c}}
    float {{=c}}_z1;
    char {{=c}}_CHANGED;
    {{~}}

    float fs;
    int firstRun;

};