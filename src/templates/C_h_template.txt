#ifndef _{{=it.class_name.toUpperCase()}}_H
#define _{{=it.class_name.toUpperCase()}}_H

{{?it.control_inputs.length > 0}}
enum {
	{{~it.control_inputs:c}}
	p_{{=c}},{{~}}
};
{{?}}

struct _{{=it.class_name}} {
	{{~it.declarations1:d}}
	float {{=d.toString().replace("instance->", "")}};{{~}}
	
	{{~it.declarations2:d}}
	float {{=d.toString().replace("instance->", "")}};{{~}}

	{{~it.control_inputs:c}}
	float {{=c}}_z1;
	char {{=c}}_CHANGED;
	{{~}}

	float fs;
	char firstRun;
};
typedef struct _{{=it.class_name}} {{=it.class_name}};


void {{=it.class_name}}_init({{=it.class_name}} *instance);
void {{=it.class_name}}_set_sample_rate({{=it.class_name}} *instance, float sample_rate);
void {{=it.class_name}}_reset({{=it.class_name}} *instance);
void {{=it.class_name}}_process({{=it.class_name}} *instance, {{?it.audio_inputs.length > 0}} {{=it.audio_inputs.map(x => 'const float *' + x).join(', ')}}, {{?}}{{?it.outputs.length > 0}}{{=it.outputs.map(x => 'float *' + x).join(', ')}}, {{?}}int nSamples);
float {{=it.class_name}}_get_parameter({{=it.class_name}} *instance, int index);
void {{=it.class_name}}_set_parameter({{=it.class_name}} *instance, int index, float value);

#endif
