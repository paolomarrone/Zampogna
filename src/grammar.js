/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,6],$V2=[1,10],$V3=[1,11],$V4=[1,8,25,52],$V5=[1,31],$V6=[1,27],$V7=[1,26],$V8=[1,28],$V9=[1,30],$Va=[1,33],$Vb=[1,8,25,30,32,34,35,37,38,39,40,42,43,45,46,52],$Vc=[2,48],$Vd=[1,8,15,25,26,30,52],$Ve=[1,37],$Vf=[1,8,15,25,26,30,32,52],$Vg=[1,38],$Vh=[1,39],$Vi=[1,8,15,25,26,30,32,34,35,52],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,8,15,25,26,30,32,34,35,37,38,39,40,52],$Vo=[1,44],$Vp=[1,45],$Vq=[1,8,15,25,26,30,32,34,35,37,38,39,40,42,43,52],$Vr=[1,46],$Vs=[1,47],$Vt=[1,8,15,25,26,30,32,34,35,37,38,39,40,42,43,45,46,52],$Vu=[2,55],$Vv=[2,54],$Vw=[1,82],$Vx=[8,18,25,52],$Vy=[1,99],$Vz=[2,12],$VA=[16,24];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"program_stmts0":4,"program_stmt":5,"const":6,"block_def":7,"END":8,"assignment":9,"ids_list1":10,"ASSIGN":11,"id":12,"LPAREN":13,"exprs_list0":14,"RPAREN":15,"LBRACE":16,"block_stmts1":17,"RBRACE":18,"anonym_block_def":19,"if_then_else":20,"IF":21,"expr":22,"mayend":23,"ELSE":24,"INIT":25,"COMMA":26,"block_stmt":27,"or_expr":28,"and_expr":29,"OR":30,"equality_expr":31,"AND":32,"relational_expr":33,"EQUAL":34,"NOTEQUAL":35,"additive_expr":36,"LESS":37,"LESSEQUAL":38,"GREATER":39,"GREATEREQUAL":40,"multiplicative_expr":41,"PLUS":42,"MINUS":43,"unary_expr":44,"TIMES":45,"DIV":46,"primary_expr":47,"NOT":48,"number":49,"SAMPLERATE":50,"fb_call":51,"ID":52,"NUMBER":53,"exprs_list1":54,"$accept":0,"$end":1},
terminals_: {2:"error",8:"END",11:"ASSIGN",13:"LPAREN",15:"RPAREN",16:"LBRACE",18:"RBRACE",21:"IF",24:"ELSE",25:"INIT",26:"COMMA",30:"OR",32:"AND",34:"EQUAL",35:"NOTEQUAL",37:"LESS",38:"LESSEQUAL",39:"GREATER",40:"GREATEREQUAL",42:"PLUS",43:"MINUS",45:"TIMES",46:"DIV",48:"NOT",50:"SAMPLERATE",52:"ID",53:"NUMBER"},
productions_: [0,[3,1],[4,2],[4,0],[5,1],[5,1],[5,1],[6,1],[7,9],[19,5],[20,16],[23,2],[23,0],[10,1],[10,2],[10,3],[17,2],[17,1],[27,2],[27,2],[27,2],[27,2],[27,1],[9,3],[22,1],[28,1],[28,3],[29,1],[29,3],[31,1],[31,3],[31,3],[33,1],[33,3],[33,3],[33,3],[33,3],[36,1],[36,3],[36,3],[41,1],[41,3],[41,3],[44,1],[44,2],[44,2],[44,2],[47,1],[47,1],[47,1],[47,3],[47,1],[12,1],[49,1],[51,4],[14,0],[14,1],[54,1],[54,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
                            this.$ = {
                                name: 'PROGRAM',
                                stmts: $$[$0]
                            }; 
                            return this.$; 
                        
break;
case 2:

                            this.$ = $$[$0-1].concat($$[$0]); 
                        
break;
case 3:

                            this.$ = [];
                        
break;
case 4: case 5: case 13: case 57:

                            this.$ = [$$[$0]]
                        
break;
case 6: case 22: case 55:

                            this.$ = []
                        
break;
case 7: case 17: case 24: case 25: case 27: case 29: case 32: case 37: case 40: case 43: case 45: case 47: case 48: case 51: case 56:

                            this.$ = $$[$0]
                        
break;
case 8:

                            this.$ = {
                                name: 'BLOCK_DEF',
                                id: $$[$0-6],
                                inputs: $$[$0-4],
                                outputs: $$[$0-8],
                                body: $$[$0-1]
                            }
                        
break;
case 9:

                            this.$ = {
                                name:    'ANONYM_BLOCK_DEF',
                                id:      {name: 'ID', val: ''},
                                inputs:  [],
                                outputs: $$[$0-4],
                                body:    $$[$0-1]
                            }
                        
break;
case 10:

                            this.$ = {
                                name:       'IF_THEN_ELSE',
                                condition:  $$[$0-11],
                                outputs:    $$[$0-15],
                                if: {
                                    name:       'ANONYM_BLOCK_DEF',
                                    id:         {name: 'ID', val: ''},
                                    inputs:     [],
                                    outputs:    $$[$0-15],
                                    body:       $$[$0-7]
                                },
                                else: {
                                    name:       'ANONYM_BLOCK_DEF',
                                    id:         {name: 'ID', val: ''},
                                    inputs:     [],
                                    outputs:    $$[$0-15],
                                    body:       $$[$0-1]
                                }
                            }
                        
break;
case 14:

                            $$[$0].init = true
                            this.$ = [$$[$0]]
                        
break;
case 15:

                            this.$ = [$$[$0-2]].concat($$[$0])
                        
break;
case 16:

                            this.$ = $$[$0-1].concat($$[$0])
                        
break;
case 18: case 19: case 20: case 21:

                            this.$ = [$$[$0-1]]
                        
break;
case 23:

                            this.$ = {
                                name: 'ASSIGNMENT',
                                expr: $$[$0],
                                outputs: $$[$0-2]
                            }
                        
break;
case 26:

                            this.$ = {
                                name: 'OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 28:

                            this.$ = {
                                name: 'AND_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 30:

                            this.$ = {
                                name: 'EQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 31:

                            this.$ = {
                                name: 'NOTEQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 33:

                            this.$ = {
                                name: 'LESS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 34:

                            this.$ = {
                                name: 'LESSEQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 35:

                            this.$ = {
                                name: 'GREATER_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 36:

                            this.$ = {
                                name: 'GREATEREQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 38:

                            this.$ = {
                                name: 'PLUS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 39:

                            this.$ = {
                                name: 'MINUS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 41:

                            this.$ = {
                                name: 'TIMES_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 42:

                            this.$ = {
                                name: 'DIV_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 44:

                            this.$ = {
                                name: 'UMINUS_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 46:

                            this.$ = {
                                name: 'NOT_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 49:

                            this.$ = {
                                name: 'SAMPLERATE',
                                val: "fs"
                            }
                        
break;
case 50:

                            this.$ = $$[$0-1]
                        
break;
case 52:
 
                            this.$ = { name: 'ID', val: yytext}; 
                        
break;
case 53:
 
                            this.$ = { name: 'NUMBER', val: parseFloat(yytext)}; 
                        
break;
case 54:

                            this.$ = {
                                name: 'CALL_EXPR',
                                id: $$[$0-3],
                                args: $$[$0-1]
                            }
                        
break;
case 58:
 
                            this.$ = [$$[$0-2]].concat($$[$0]) 
                        
break;
}
},
table: [{1:$V0,3:1,4:2,5:3,6:4,7:5,8:$V1,9:7,10:8,12:9,25:$V2,52:$V3},{1:[3]},{1:[2,1]},{1:$V0,4:12,5:3,6:4,7:5,8:$V1,9:7,10:8,12:9,25:$V2,52:$V3},o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),{11:[1,13]},{11:[2,13],26:[1,14]},{12:15,52:$V3},o([1,8,11,13,15,25,26,30,32,34,35,37,38,39,40,42,43,45,46,52],[2,52]),{1:[2,2]},{12:16,13:$V5,22:17,28:18,29:19,31:20,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{10:34,12:9,25:$V2,52:$V3},{11:[2,14]},o($Vb,$Vc,{13:[1,35]}),o($V4,[2,23]),o([1,8,15,25,26,52],[2,24],{30:[1,36]}),o($Vd,[2,25],{32:$Ve}),o($Vf,[2,27],{34:$Vg,35:$Vh}),o($Vi,[2,29],{37:$Vj,38:$Vk,39:$Vl,40:$Vm}),o($Vn,[2,32],{42:$Vo,43:$Vp}),o($Vq,[2,37],{45:$Vr,46:$Vs}),o($Vt,[2,40]),o($Vt,[2,43]),{12:49,13:$V5,47:48,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,47:50,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,47:51,49:29,50:$V9,51:32,52:$V3,53:$Va},o($Vt,[2,47]),o($Vt,[2,49]),{12:49,13:$V5,22:52,28:18,29:19,31:20,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},o($Vt,[2,51]),o($Vt,[2,53]),{11:[2,15]},{12:49,13:$V5,14:53,15:$Vu,22:55,28:18,29:19,31:20,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va,54:54},{12:49,13:$V5,29:56,31:20,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,31:57,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,33:58,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,33:59,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,36:60,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,36:61,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,36:62,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,36:63,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,41:64,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,41:65,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,42:$V6,43:$V7,44:66,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{12:49,13:$V5,42:$V6,43:$V7,44:67,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},o($Vt,[2,44]),o($Vt,$Vc,{13:[1,68]}),o($Vt,[2,45]),o($Vt,[2,46]),{15:[1,69]},{15:[1,70]},{15:[2,56]},{15:[2,57],26:[1,71]},o($Vd,[2,26],{32:$Ve}),o($Vf,[2,28],{34:$Vg,35:$Vh}),o($Vi,[2,30],{37:$Vj,38:$Vk,39:$Vl,40:$Vm}),o($Vi,[2,31],{37:$Vj,38:$Vk,39:$Vl,40:$Vm}),o($Vn,[2,33],{42:$Vo,43:$Vp}),o($Vn,[2,34],{42:$Vo,43:$Vp}),o($Vn,[2,35],{42:$Vo,43:$Vp}),o($Vn,[2,36],{42:$Vo,43:$Vp}),o($Vq,[2,38],{45:$Vr,46:$Vs}),o($Vq,[2,39],{45:$Vr,46:$Vs}),o($Vt,[2,41]),o($Vt,[2,42]),{12:49,13:$V5,14:72,15:$Vu,22:55,28:18,29:19,31:20,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va,54:54},o($Vt,[2,50]),o($Vb,$Vv,{16:[1,73]}),{12:49,13:$V5,22:55,28:18,29:19,31:20,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va,54:74},{15:[1,75]},{7:79,8:$Vw,9:78,10:83,12:9,17:76,19:80,20:81,25:$V2,27:77,52:$V3},{15:[2,58]},o($Vt,$Vv),{18:[1,84]},{7:79,8:$Vw,9:78,10:83,12:9,17:85,18:[2,17],19:80,20:81,25:$V2,27:77,52:$V3},{8:[1,86]},{8:[1,87]},{8:[1,88]},{8:[1,89]},o($Vx,[2,22]),{11:[1,90]},o($V4,[2,8]),{18:[2,16]},o($Vx,[2,18]),o($Vx,[2,19]),o($Vx,[2,20]),o($Vx,[2,21]),{12:16,13:$V5,16:[1,91],21:[1,92],22:17,28:18,29:19,31:20,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{7:79,8:$Vw,9:78,10:83,12:9,17:93,19:80,20:81,25:$V2,27:77,52:$V3},{13:[1,94]},{18:[1,95]},{12:49,13:$V5,22:96,28:18,29:19,31:20,33:21,36:22,41:23,42:$V6,43:$V7,44:24,47:25,48:$V8,49:29,50:$V9,51:32,52:$V3,53:$Va},{8:[2,9]},{15:[1,97]},{8:$Vy,16:$Vz,23:98},{16:[1,100]},o($VA,$Vz,{23:101,8:$Vy}),{7:79,8:$Vw,9:78,10:83,12:9,17:102,19:80,20:81,25:$V2,27:77,52:$V3},o($VA,[2,11]),{18:[1,103]},{8:$Vy,23:104,24:$Vz},{24:[1,105]},{8:$Vy,16:$Vz,23:106},{16:[1,107]},{7:79,8:$Vw,9:78,10:83,12:9,17:108,19:80,20:81,25:$V2,27:77,52:$V3},{18:[1,109]},{8:[2,10]}],
defaultActions: {2:[2,1],12:[2,2],15:[2,14],34:[2,15],54:[2,56],74:[2,58],85:[2,16],95:[2,9],109:[2,10]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* inline comment */
break;
case 1:/* pause comment */
break;
case 2:return "GREATEREQUAL";
break;
case 3:return "LESSEQUAL";
break;
case 4:return "LESS";
break;
case 5:return "GREATER";
break;
case 6:return "EQUAL";
break;
case 7:return "NOTEQUAL";
break;
case 8:return "NOT";
break;
case 9:return "AND";
break;
case 10:return "OR";
break;
case 11:return 11;
break;
case 12:return 16;
break;
case 13:return 18;
break;
case 14:return 53;
break;
case 15:return 50;
break;
case 16:return 21
break;
case 17:return "ELSE"
break;
case 18:return 52;
break;
case 19:return 42;
break;
case 20:return 43;
break;
case 21:return 45;
break;
case 22:return 46;
break;
case 23:return 13;
break;
case 24:return 15;
break;
case 25:return 26;
break;
case 26:return 25;
break;
case 27:return 8;
break;
case 28:return 8;
break;
case 29:/* skip whitespace */
break;
}
},
rules: [/^(?:#[^\n\r]*)/,/^(?:\.\.\.[^\n^\n]*[\n\r]+)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:((0|[1-9][0-9]*)(\.[0-9]+)?([eE](\+|-)?[0-9]+)?))/,/^(?:fs\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:@)/,/^(?:[\n\r]+)/,/^(?:[;]+)/,/^(?:[ \t]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}