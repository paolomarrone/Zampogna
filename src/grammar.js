/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,7],$V1=[1,7],$V2=[1,34],$V3=[1,9],$V4=[1,32],$V5=[1,25],$V6=[1,24],$V7=[1,26],$V8=[1,27],$V9=[1,31],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,9,16,19,20,30,57,58,64,65,68,70,71,72,73,75,76,77,78],$Vj=[1,44],$Vk=[15,17,22,74],$Vl=[9,15,17,22,34,74],$Vm=[9,15,17,22,33,34,36,74],$Vn=[1,48],$Vo=[9,15,17,22,33,34,36,38,74],$Vp=[1,49],$Vq=[9,15,17,22,33,34,36,38,40,74],$Vr=[1,50],$Vs=[9,15,17,22,33,34,36,38,40,42,74],$Vt=[1,51],$Vu=[9,15,17,22,33,34,36,38,40,42,44,74],$Vv=[1,52],$Vw=[1,53],$Vx=[9,15,17,22,33,34,36,38,40,42,44,46,47,74],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[9,15,17,22,33,34,36,38,40,42,44,46,47,49,50,51,52,74],$VD=[1,58],$VE=[1,59],$VF=[9,15,17,22,33,34,36,38,40,42,44,46,47,49,50,51,52,54,55,74],$VG=[1,60],$VH=[1,61],$VI=[9,15,17,22,33,34,36,38,40,42,44,46,47,49,50,51,52,54,55,57,58,74],$VJ=[1,62],$VK=[1,63],$VL=[1,64],$VM=[9,15,17,22,33,34,36,38,40,42,44,46,47,49,50,51,52,54,55,57,58,60,61,62,74],$VN=[1,65],$VO=[9,15,17,22,33,34,36,38,40,42,44,46,47,49,50,51,52,54,55,57,58,60,61,62,67,74],$VP=[2,65],$VQ=[1,71],$VR=[16,75],$VS=[1,81],$VT=[9,33,36,38,40,42,44,46,47,49,50,51,52,54,55,57,58,60,61,62,67],$VU=[2,60],$VV=[2,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"includes":5,"include":6,"INCLUDE":7,"id":8,"END":9,"statement":10,"block_definition":11,"memory_declaration":12,"assignment":13,"exprs":14,"=":15,"(":16,")":17,"block":18,"MEM":19,"[":20,"expr":21,"]":22,"type":23,"if_then_elses":24,"IF":25,"branch":26,"elseifs":27,"ELSE":28,"{":29,"}":30,"conditional_expr":31,"logical_or_expr":32,"?":33,":":34,"logical_and_expr":35,"||":36,"inclusive_or_expr":37,"&&":38,"exclusive_or_expr":39,"|":40,"and_expr":41,"^":42,"equality_expr":43,"&":44,"relational_expr":45,"==":46,"!=":47,"shift_expr":48,"<":49,"<=":50,">":51,">=":52,"additive_expr":53,"<<":54,">>":55,"multiplicative_expr":56,"+":57,"-":58,"unary_expr":59,"*":60,"/":61,"%":62,"postfix_expr":63,"!":64,"~":65,"primary_expr":66,".":67,"_":68,"constant":69,"CONSTANT_INT32":70,"CONSTANT_FLOAT32":71,"CONSTANT_TRUE":72,"CONSTANT_FALSE":73,",":74,"ID":75,"TYPE_INT32":76,"TYPE_FLOAT32":77,"TYPE_BOOL":78,"$accept":0,"$end":1},
terminals_: {2:"error",7:"INCLUDE",9:"END",15:"=",16:"(",17:")",19:"MEM",20:"[",22:"]",25:"IF",28:"ELSE",29:"{",30:"}",33:"?",34:":",36:"||",38:"&&",40:"|",42:"^",44:"&",46:"==",47:"!=",49:"<",50:"<=",51:">",52:">=",54:"<<",55:">>",57:"+",58:"-",60:"*",61:"/",62:"%",64:"!",65:"~",67:".",68:"_",70:"CONSTANT_INT32",71:"CONSTANT_FLOAT32",72:"CONSTANT_TRUE",73:"CONSTANT_FALSE",74:",",75:"ID",76:"TYPE_INT32",77:"TYPE_FLOAT32",78:"TYPE_BOOL"},
productions_: [0,[3,1],[5,2],[5,0],[6,3],[6,1],[4,2],[4,0],[10,1],[10,1],[10,1],[10,1],[11,7],[11,6],[12,7],[13,4],[13,4],[13,4],[24,8],[26,1],[27,7],[27,0],[18,3],[21,1],[31,1],[31,5],[32,1],[32,3],[35,1],[35,3],[37,1],[37,3],[39,1],[39,3],[41,1],[41,3],[43,1],[43,3],[43,3],[45,1],[45,3],[45,3],[45,3],[45,3],[48,1],[48,3],[48,3],[53,1],[53,3],[53,3],[56,1],[56,3],[56,3],[56,3],[59,1],[59,2],[59,2],[59,2],[59,2],[63,1],[63,3],[63,4],[63,4],[63,4],[63,3],[66,1],[66,2],[66,1],[66,3],[66,1],[66,3],[69,1],[69,1],[69,1],[69,1],[14,1],[14,3],[8,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                            this.$ = {
                                name: 'PROGRAM',
                                statements: $$[$0]
                            }; 
                            return this.$; 
                        
break;
case 2:

                            this.$ = $$[$0-1].concat($$[$0]);
                        
break;
case 3: case 5:

                            this.$ = [];
                        
break;
case 4:

                            this.$ = {
                                name: 'INCLUDE',
                                id: $$[$0-1]
                            };
                        
break;
case 6:

                            this.$ = $$[$0-1].concat($$[$0]); 
                        
break;
case 7:

                            this.$ = []
                        
break;
case 8: case 9: case 10: case 23: case 24: case 26: case 28: case 30: case 32: case 34: case 44: case 54: case 56: case 59: case 69:
 this.$ = $$[$0] 
break;
case 11: case 21:
 this.$ = [] 
break;
case 12:

                            this.$ = {
                                name: 'BLOCK_DEFINITION',
                                id: $$[$0-4],
                                inputs: $$[$0-2],
                                outputs: $$[$0-6],
                                statements: $$[$0].statements
                            }
                        
break;
case 13:

                            this.$ = {
                                name: 'BLOCK_DEFINITION',
                                id: $$[$0-3],
                                inputs: [],
                                outputs: $$[$0-5],
                                statements: $$[$0].statements
                            }
                        
break;
case 14:

                            this.$ = {
                                name: 'MEMORY_DECLARATION',
                                type: $$[$0-2],
                                size: $$[$0-4],
                                id: $$[$0-1]
                            }
                        
break;
case 15:

                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'EXPR',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 16:

                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'IF_THEN_ELSES',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 17:

                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'ANONYMOUS_BLOCK',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 18:

                            $$[$0-3].condition = $$[$0-5],
                            this.$ = {
                                name: 'IF_THEN_ELSES',
                                branches: [$$[$0-3], $$[$0-2], $$[$0]].flat()
                            }
                        
break;
case 19:

                            this.$ = {
                                name: 'BRANCH',
                                condition: null, // expr or null if else
                                block: $$[$0]
                            }
                        
break;
case 20:

                            $$[$0].condition = $$[$0-2]
                            this.$ = $$[$0-6].concat($$[$0])
                        
break;
case 22:

                            this.$ = {
                                name: 'BLOCK',
                                statements: $$[$0-1]
                            }
                        
break;
case 25:

                            this.$ = {
                                name: 'INLINE_IF_THEN_ELSE',
                                args: [$$[$0-4], $$[$0-2], $$[$0]]
                            }
                        
break;
case 27:

                            this.$ = {
                                name: 'LOGICAL_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 29:

                            this.$ = {
                                name: 'LOGICAL_AND_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 31:

                            this.$ = {
                                name: 'BITWISE_INCLUSIVE_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 33:

                            this.$ = {
                                name: 'BITWISE_EXCLUSIVE_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 35:

                            this.$ = {
                                name: 'BITWISE_AND_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 36: case 39: case 47: case 50:

                            this.$ = $$[$0]
                        
break;
case 37:

                            this.$ = {
                                name: 'EQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 38:

                            this.$ = {
                                name: 'NOTEQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 40:

                            this.$ = {
                                name: 'LESS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 41:

                            this.$ = {
                                name: 'LESSEQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 42:

                            this.$ = {
                                name: 'GREATER_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 43:

                            this.$ = {
                                name: 'GREATEREQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 45:

                            this.$ = {
                                name: 'SHIFT_LEFT_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 46:

                            this.$ = {
                                name: 'SHIFT_RIGHT_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 48:

                            this.$ = {
                                name: 'PLUS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 49:

                            this.$ = {
                                name: 'MINUS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 51:

                            this.$ = {
                                name: 'TIMES_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 52:

                            this.$ = {
                                name: 'DIV_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 53:

                            this.$ = {
                                name: 'MODULO_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 55:

                            this.$ = {
                                name: 'UMINUS_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 57:

                            this.$ = {
                                name: 'LOGICAL_NOT_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 58:

                            this.$ = {
                                name: 'BITWISE_NOT_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 60:

                            this.$ = {
                                name: 'CALL_EXPR',
                                id: $$[$0-2],
                                outputs_N: 0,
                                args: []
                            }
                        
break;
case 61:

                            this.$ = {
                                name: 'CALL_EXPR',
                                id: $$[$0-3],
                                outputs_N: 0,
                                args: $$[$0-1]
                            }
                        
break;
case 62:

                            this.$ = {
                                name: 'CAST_EXPR',
                                type: $$[$0-3],
                                args: $$[$0-1]
                            }
                        
break;
case 63:

                            this.$ = {
                                name: 'MEMORY_ELEMENT',
                                id: $$[$0-3],
                                args: [$$[$0-1]]
                            }
                        
break;
case 64:

                            this.$ = {
                                name: 'PROPERTY',
                                expr: $$[$0-2],
                                property_id: $$[$0]
                            }
                        
break;
case 65:
 
                            this.$ = {
                                name: 'VARIABLE',
                                id: $$[$0]
                            } 
                        
break;
case 66:

                            this.$ = {
                                name: 'VARIABLE',
                                id: $$[$0],
                                declaredType: $$[$0-1]
                            }
                        
break;
case 67:
 this.$ = { name: 'DISCARD' } 
break;
case 68:

                            this.$ = {
                                name: 'ARRAY_CONST',
                                args: $$[$0-1]
                            }
                        
break;
case 70:
 this.$ = $$[$0-1] 
break;
case 71:
 
                            this.$ = { name: 'CONSTANT', type: 'INT32', val: parseInt(yytext) };
                        
break;
case 72:
 this.$ = { name: 'CONSTANT', type: 'FLOAT32', val: parseFloat(yytext) };
                        
break;
case 73:
 
                            this.$ = { name: 'CONSTANT', type:'BOOL', val: true }; 
                        
break;
case 74:
 
                            this.$ = { name: 'CONSTANT', type:'BOOL', val: false }; 
                        
break;
case 75:
 this.$ = [$$[$0]] 
break;
case 76:
 
                            this.$ = $$[$0-2].concat($$[$0]) 
                        
break;
case 77:
 
                            this.$ = yytext; 
                        
break;
case 78:

                            this.$ = 'TYPE_INT32'
                        
break;
case 79:

                            this.$ = 'TYPE_FLOAT32'
                        
break;
case 80:

                            this.$ = 'TYPE_BOOL'
                        
break;
}
},
table: [o([1,9,16,19,20,57,58,64,65,68,70,71,72,73,75,76,77,78],$V0,{3:1,4:2}),{1:[3]},{1:[2,1],8:29,9:$V1,10:3,11:4,12:5,13:6,14:8,16:$V2,19:$V3,20:$V4,21:10,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($Vi,[2,6]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),{15:[1,43],74:$Vj},{20:[1,45]},o($Vk,[2,75]),o($Vl,[2,23]),o($Vl,[2,24],{33:[1,46],36:[1,47]}),o($Vm,[2,26],{38:$Vn}),o($Vo,[2,28],{40:$Vp}),o($Vq,[2,30],{42:$Vr}),o($Vs,[2,32],{44:$Vt}),o($Vu,[2,34],{46:$Vv,47:$Vw}),o($Vx,[2,36],{49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VC,[2,39],{54:$VD,55:$VE}),o($VF,[2,44],{57:$VG,58:$VH}),o($VI,[2,47],{60:$VJ,61:$VK,62:$VL}),o($VM,[2,50]),o($VM,[2,54],{67:$VN}),{8:29,16:$V2,20:$V4,23:30,63:66,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,63:67,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,63:68,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,63:69,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($VO,[2,59]),o($VO,$VP,{16:[1,70],20:$VQ}),{8:73,16:[1,72],75:$Ve},o($VO,[2,67]),{8:29,14:74,16:$V2,20:$V4,21:10,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($VO,[2,69]),{8:29,16:$V2,20:$V4,21:75,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o([9,15,16,17,20,22,33,34,36,38,40,42,44,46,47,49,50,51,52,54,55,57,58,60,61,62,67,74],[2,77]),o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),o($VO,[2,71]),o($VO,[2,72]),o($VO,[2,73]),o($VO,[2,74]),{8:76,16:$V2,18:79,20:$V4,21:77,23:30,24:78,25:[1,80],29:$VS,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,21:82,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,21:83,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,21:84,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,35:85,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,37:86,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,39:87,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,41:88,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,43:89,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,45:90,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,45:91,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,48:92,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,48:93,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,48:94,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,48:95,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,53:96,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,53:97,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,56:98,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,56:99,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,57:$V5,58:$V6,59:100,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,57:$V5,58:$V6,59:101,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,57:$V5,58:$V6,59:102,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:103,75:$Ve},o($VM,[2,55],{67:$VN}),o($VM,[2,56],{67:$VN}),o($VM,[2,57],{67:$VN}),o($VM,[2,58],{67:$VN}),{8:29,14:105,16:$V2,17:[1,104],20:$V4,21:10,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,21:106,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,14:107,16:$V2,20:$V4,21:10,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($VO,[2,66]),{22:[1,108],74:$Vj},{17:[1,109]},o($VT,$VP,{16:[1,110],20:$VQ}),{9:[1,111]},{9:[1,112]},{9:[1,113]},{16:[1,114]},o([9,16,19,20,30,57,58,64,65,68,70,71,72,73,75,76,77,78],$V0,{4:115}),o($Vk,[2,76]),{22:[1,116]},{34:[1,117]},o($Vm,[2,27],{38:$Vn}),o($Vo,[2,29],{40:$Vp}),o($Vq,[2,31],{42:$Vr}),o($Vs,[2,33],{44:$Vt}),o($Vu,[2,35],{46:$Vv,47:$Vw}),o($Vx,[2,37],{49:$Vy,50:$Vz,51:$VA,52:$VB}),o($Vx,[2,38],{49:$Vy,50:$Vz,51:$VA,52:$VB}),o($VC,[2,40],{54:$VD,55:$VE}),o($VC,[2,41],{54:$VD,55:$VE}),o($VC,[2,42],{54:$VD,55:$VE}),o($VC,[2,43],{54:$VD,55:$VE}),o($VF,[2,45],{57:$VG,58:$VH}),o($VF,[2,46],{57:$VG,58:$VH}),o($VI,[2,48],{60:$VJ,61:$VK,62:$VL}),o($VI,[2,49],{60:$VJ,61:$VK,62:$VL}),o($VM,[2,51]),o($VM,[2,52]),o($VM,[2,53]),o($VO,[2,64]),o($VO,$VU),{17:[1,118],74:$Vj},{22:[1,119]},{17:[1,120],74:$Vj},o($VO,[2,68]),o($VO,[2,70]),{8:29,14:121,16:$V2,17:[1,122],20:$V4,21:10,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),{8:29,16:$V2,20:$V4,21:123,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{8:29,9:$V1,10:3,11:4,12:5,13:6,14:8,16:$V2,19:$V3,20:$V4,21:10,23:30,30:[1,124],31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{23:125,76:$Vf,77:$Vg,78:$Vh},{8:29,16:$V2,20:$V4,23:30,31:126,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},o($VO,$VV),o($VO,[2,63]),o($VO,[2,62]),{17:[1,127],74:$Vj},o($VT,$VU,{18:128,29:$VS}),{17:[1,129]},o([1,9,16,19,20,28,30,57,58,64,65,68,70,71,72,73,75,76,77,78],[2,22]),{8:130,75:$Ve},o($Vl,[2,25]),o($VT,$VV,{18:131,29:$VS}),o($Vi,[2,13]),{18:133,26:132,29:$VS},{9:[1,134]},o($Vi,[2,12]),{27:135,28:[2,21]},o([9,28],[2,19]),o($Vi,[2,14]),{28:[1,136]},{18:133,25:[1,138],26:137,29:$VS},{9:[2,18]},{16:[1,139]},{8:29,16:$V2,20:$V4,21:140,23:30,31:11,32:12,35:13,37:14,39:15,41:16,43:17,45:18,48:19,53:20,56:21,57:$V5,58:$V6,59:22,63:23,64:$V7,65:$V8,66:28,68:$V9,69:33,70:$Va,71:$Vb,72:$Vc,73:$Vd,75:$Ve,76:$Vf,77:$Vg,78:$Vh},{17:[1,141]},{18:133,26:142,29:$VS},{28:[2,20]}],
defaultActions: {137:[2,18],142:[2,20]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* inline comment */
break;
case 1:/* pause comment */
break;
case 2:return ">>"
break;
case 3:return "<<"
break;
case 4:return ">="
break;
case 5:return "<="
break;
case 6:return 57
break;
case 7:return 58
break;
case 8:return 60
break;
case 9:return 61
break;
case 10:return 62
break;
case 11:return "<"
break;
case 12:return ">"
break;
case 13:return "=="
break;
case 14:return "!="
break;
case 15:return "!"
break;
case 16:return "&&"
break;
case 17:return "||"
break;
case 18:return "&"
break;
case 19:return "|"
break;
case 20:return "^"
break;
case 21:return "~"
break;
case 22:return 15
break;
case 23:return 29
break;
case 24:return 30
break;
case 25:return 16
break;
case 26:return 17
break;
case 27:return 74
break;
case 28:return 20
break;
case 29:return 22
break;
case 30:return 71
break;
case 31:return 70
break;
case 32:return 72
break;
case 33:return 73
break;
case 34:return 76
break;
case 35:return 77
break;
case 36:return 78
break;
case 37:return 68
break;
case 38:return 19
break;
case 39:return 25
break;
case 40:return "ELSE"
break;
case 41:return 33
break;
case 42:return 34
break;
case 43:return 67
break;
case 44:return 7
break;
case 45:return 75
break;
case 46:return 9
break;
case 47:return 9
break;
case 48:/* ignore bad chars */
break;
}
},
rules: [/^(?:#[^\n\r]*)/,/^(?:\.\.\.[^\n^\n]*[\n\r]+)/,/^(?:>>)/,/^(?:<<)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:~)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:((0|[1-9][0-9]*)\.[0-9]+([eE](\+|-)?[0-9]+)?))/,/^(?:((0|[1-9][0-9]*)([eE](\+|-)?[0-9]+)?))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:bool\b)/,/^(?:_\b)/,/^(?:mem\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:include\b)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:[\n\r;]+)/,/^(?:$)/,/^(?:[ \t\v\f]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}