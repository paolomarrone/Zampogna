/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,7],$V2=[1,34],$V3=[1,9],$V4=[1,32],$V5=[1,25],$V6=[1,24],$V7=[1,26],$V8=[1,27],$V9=[1,31],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,9,13,16,17,27,54,55,61,62,65,67,68,69,70,72,73,74,75],$Vj=[1,44],$Vk=[11,14,19,71],$Vl=[9,11,14,19,31,71],$Vm=[9,11,14,19,30,31,33,71],$Vn=[1,48],$Vo=[9,11,14,19,30,31,33,35,71],$Vp=[1,49],$Vq=[9,11,14,19,30,31,33,35,37,71],$Vr=[1,50],$Vs=[9,11,14,19,30,31,33,35,37,39,71],$Vt=[1,51],$Vu=[9,11,14,19,30,31,33,35,37,39,41,71],$Vv=[1,52],$Vw=[1,53],$Vx=[9,11,14,19,30,31,33,35,37,39,41,43,44,71],$Vy=[1,54],$Vz=[1,55],$VA=[1,56],$VB=[1,57],$VC=[9,11,14,19,30,31,33,35,37,39,41,43,44,46,47,48,49,71],$VD=[1,58],$VE=[1,59],$VF=[9,11,14,19,30,31,33,35,37,39,41,43,44,46,47,48,49,51,52,71],$VG=[1,60],$VH=[1,61],$VI=[9,11,14,19,30,31,33,35,37,39,41,43,44,46,47,48,49,51,52,54,55,71],$VJ=[1,62],$VK=[1,63],$VL=[1,64],$VM=[9,11,14,19,30,31,33,35,37,39,41,43,44,46,47,48,49,51,52,54,55,57,58,59,71],$VN=[2,60],$VO=[1,70],$VP=[1,71],$VQ=[13,72],$VR=[1,81],$VS=[9,30,33,35,37,39,41,43,44,46,47,48,49,51,52,54,55,57,58,59],$VT=[2,56],$VU=[2,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"statement":5,"block_definition":6,"memory_declaration":7,"assignment":8,"END":9,"exprs":10,"=":11,"id":12,"(":13,")":14,"block":15,"MEM":16,"[":17,"expr":18,"]":19,"type":20,"if_then_elses":21,"IF":22,"branch":23,"elseifs":24,"ELSE":25,"{":26,"}":27,"conditional_expr":28,"logical_or_expr":29,"?":30,":":31,"logical_and_expr":32,"||":33,"inclusive_or_expr":34,"&&":35,"exclusive_or_expr":36,"|":37,"and_expr":38,"^":39,"equality_expr":40,"&":41,"relational_expr":42,"==":43,"!=":44,"shift_expr":45,"<":46,"<=":47,">":48,">=":49,"additive_expr":50,"<<":51,">>":52,"multiplicative_expr":53,"+":54,"-":55,"unary_expr":56,"*":57,"/":58,"%":59,"postfix_expr":60,"!":61,"~":62,"primary_expr":63,".":64,"_":65,"constant":66,"CONSTANT_INT32":67,"CONSTANT_FLOAT32":68,"CONSTANT_TRUE":69,"CONSTANT_FALSE":70,",":71,"ID":72,"TYPE_INT32":73,"TYPE_FLOAT32":74,"TYPE_BOOL":75,"$accept":0,"$end":1},
terminals_: {2:"error",9:"END",11:"=",13:"(",14:")",16:"MEM",17:"[",19:"]",22:"IF",25:"ELSE",26:"{",27:"}",30:"?",31:":",33:"||",35:"&&",37:"|",39:"^",41:"&",43:"==",44:"!=",46:"<",47:"<=",48:">",49:">=",51:"<<",52:">>",54:"+",55:"-",57:"*",58:"/",59:"%",61:"!",62:"~",64:".",65:"_",67:"CONSTANT_INT32",68:"CONSTANT_FLOAT32",69:"CONSTANT_TRUE",70:"CONSTANT_FALSE",71:",",72:"ID",73:"TYPE_INT32",74:"TYPE_FLOAT32",75:"TYPE_BOOL"},
productions_: [0,[3,1],[4,2],[4,0],[5,1],[5,1],[5,1],[5,1],[6,7],[6,6],[7,7],[8,4],[8,4],[8,4],[21,8],[23,1],[24,7],[24,0],[15,3],[18,1],[28,1],[28,5],[29,1],[29,3],[32,1],[32,3],[34,1],[34,3],[36,1],[36,3],[38,1],[38,3],[40,1],[40,3],[40,3],[42,1],[42,3],[42,3],[42,3],[42,3],[45,1],[45,3],[45,3],[50,1],[50,3],[50,3],[53,1],[53,3],[53,3],[53,3],[56,1],[56,2],[56,2],[56,2],[56,2],[60,1],[60,3],[60,4],[60,4],[60,4],[63,1],[63,2],[63,3],[63,1],[63,3],[63,1],[63,3],[66,1],[66,1],[66,1],[66,1],[10,1],[10,3],[12,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                            this.$ = {
                                name: 'PROGRAM',
                                statements: $$[$0]
                            }; 
                            return this.$; 
                        
break;
case 2:

                            this.$ = $$[$0-1].concat($$[$0]); 
                        
break;
case 3:

                            this.$ = []
                        
break;
case 4: case 5: case 6: case 19: case 20: case 22: case 24: case 26: case 28: case 30: case 40: case 50: case 52: case 55: case 65:
 this.$ = $$[$0] 
break;
case 7: case 17:
 this.$ = [] 
break;
case 8:

                            this.$ = {
                                name: 'BLOCK_DEFINITION',
                                id: $$[$0-4],
                                inputs: $$[$0-2],
                                outputs: $$[$0-6],
                                statements: $$[$0].statements
                            }
                        
break;
case 9:

                            this.$ = {
                                name: 'BLOCK_DEFINITION',
                                id: $$[$0-3],
                                inputs: [],
                                outputs: $$[$0-5],
                                statements: $$[$0].statements
                            }
                        
break;
case 10:

                            this.$ = {
                                name: 'MEMORY_DECLARATION',
                                type: $$[$0-2],
                                size: $$[$0-4],
                                id: $$[$0-1]
                            }
                        
break;
case 11:

                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'EXPR',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 12:

                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'IF_THEN_ELSES',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 13:

                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'ANONYMOUS_BLOCK',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 14:

                            $$[$0-3].condition = $$[$0-5],
                            this.$ = {
                                name: 'IF_THEN_ELSES',
                                branches: [$$[$0-3], $$[$0-2], $$[$0]].flat()
                            }
                        
break;
case 15:

                            this.$ = {
                                name: 'BRANCH',
                                condition: null, // expr or null if else
                                block: $$[$0]
                            }
                        
break;
case 16:

                            $$[$0].condition = $$[$0-2]
                            this.$ = $$[$0-6].concat($$[$0])
                        
break;
case 18:

                            this.$ = {
                                name: 'BLOCK',
                                statements: $$[$0-1]
                            }
                        
break;
case 21:

                            this.$ = {
                                name: 'INLINE_IF_THEN_ELSE',
                                args: [$$[$0-4], $$[$0-2], $$[$0]]
                            }
                        
break;
case 23:

                            this.$ = {
                                name: 'LOGICAL_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 25:

                            this.$ = {
                                name: 'LOGICAL_AND_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 27:

                            this.$ = {
                                name: 'BITWISE_INCLUSIVE_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 29:

                            this.$ = {
                                name: 'BITWISE_EXCLUSIVE_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 31:

                            this.$ = {
                                name: 'BITWISE_AND_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 32: case 35: case 43: case 46:

                            this.$ = $$[$0]
                        
break;
case 33:

                            this.$ = {
                                name: 'EQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 34:

                            this.$ = {
                                name: 'NOTEQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 36:

                            this.$ = {
                                name: 'LESS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 37:

                            this.$ = {
                                name: 'LESSEQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 38:

                            this.$ = {
                                name: 'GREATER_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 39:

                            this.$ = {
                                name: 'GREATEREQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 41:

                            this.$ = {
                                name: 'SHIFT_LEFT_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 42:

                            this.$ = {
                                name: 'SHIFT_RIGHT_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 44:

                            this.$ = {
                                name: 'PLUS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 45:

                            this.$ = {
                                name: 'MINUS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 47:

                            this.$ = {
                                name: 'TIMES_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 48:

                            this.$ = {
                                name: 'DIV_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 49:

                            this.$ = {
                                name: 'MODULO_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 51:

                            this.$ = {
                                name: 'UMINUS_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 53:

                            this.$ = {
                                name: 'LOGICAL_NOT_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 54:

                            this.$ = {
                                name: 'BITWISE_NOT_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 56:

                            this.$ = {
                                name: 'CALL_EXPR',
                                id: $$[$0-2],
                                args: []
                            }
                        
break;
case 57:

                            this.$ = {
                                name: 'CALL_EXPR',
                                id: $$[$0-3],
                                args: $$[$0-1]
                            }
                        
break;
case 58:

                            this.$ = {
                                name: 'CAST_EXPR',
                                type: $$[$0-3],
                                args: $$[$0-1]
                            }
                        
break;
case 59:

                            this.$ = {
                                name: 'MEMORY_ELEMENT',
                                id: $$[$0-3],
                                args: [$$[$0-1]]
                            }
                        
break;
case 60:
 
                            this.$ = {
                                name: 'VARIABLE',
                                id: $$[$0]
                            } 
                        
break;
case 61:

                            this.$ = {
                                name: 'VARIABLE',
                                id: $$[$0],
                                declaredType: $$[$0-1]
                            }
                        
break;
case 62:

                            this.$ = {
                                name: 'PROPERTY',
                                id: $$[$0-2],
                                property_id: $$[$0]
                            }
                        
break;
case 63:
 this.$ = { name: 'DISCARD' } 
break;
case 64:

                            this.$ = {
                                name: 'ARRAY_CONST',
                                args: $$[$0-1]
                            }
                        
break;
case 66:
 this.$ = $$[$0-1] 
break;
case 67:
 
                            this.$ = { name: 'CONSTANT', type: 'INT32', val: parseInt(yytext) };
                        
break;
case 68:
 this.$ = { name: 'CONSTANT', type: 'FLOAT32', val: parseFloat(yytext) };
                        
break;
case 69:
 
                            this.$ = { name: 'CONSTANT', type:'BOOL', val: true }; 
                        
break;
case 70:
 
                            this.$ = { name: 'CONSTANT', type:'BOOL', val: false }; 
                        
break;
case 71:
 this.$ = [$$[$0]] 
break;
case 72:
 
                            this.$ = $$[$0-2].concat($$[$0]) 
                        
break;
case 73:
 
                            this.$ = yytext; 
                        
break;
case 74:

                            this.$ = 'INT32'
                        
break;
case 75:

                            this.$ = 'FLOAT32'
                        
break;
case 76:

                            this.$ = 'BOOL'
                        
break;
}
},
table: [o([1,9,13,16,17,54,55,61,62,65,67,68,69,70,72,73,74,75],$V0,{3:1,4:2}),{1:[3]},{1:[2,1],5:3,6:4,7:5,8:6,9:$V1,10:8,12:29,13:$V2,16:$V3,17:$V4,18:10,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},o($Vi,[2,2]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),{11:[1,43],71:$Vj},{17:[1,45]},o($Vk,[2,71]),o($Vl,[2,19]),o($Vl,[2,20],{30:[1,46],33:[1,47]}),o($Vm,[2,22],{35:$Vn}),o($Vo,[2,24],{37:$Vp}),o($Vq,[2,26],{39:$Vr}),o($Vs,[2,28],{41:$Vt}),o($Vu,[2,30],{43:$Vv,44:$Vw}),o($Vx,[2,32],{46:$Vy,47:$Vz,48:$VA,49:$VB}),o($VC,[2,35],{51:$VD,52:$VE}),o($VF,[2,40],{54:$VG,55:$VH}),o($VI,[2,43],{57:$VJ,58:$VK,59:$VL}),o($VM,[2,46]),o($VM,[2,50]),{12:29,13:$V2,17:$V4,20:30,60:65,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,60:66,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,60:67,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,60:68,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},o($VM,[2,55]),o($VM,$VN,{13:[1,69],17:$VO,64:$VP}),{12:73,13:[1,72],72:$Ve},o($VM,[2,63]),{10:74,12:29,13:$V2,17:$V4,18:10,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},o($VM,[2,65]),{12:29,13:$V2,17:$V4,18:75,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},o([9,11,13,14,17,19,30,31,33,35,37,39,41,43,44,46,47,48,49,51,52,54,55,57,58,59,64,71],[2,73]),o($VQ,[2,74]),o($VQ,[2,75]),o($VQ,[2,76]),o($VM,[2,67]),o($VM,[2,68]),o($VM,[2,69]),o($VM,[2,70]),{12:76,13:$V2,15:79,17:$V4,18:77,20:30,21:78,22:[1,80],26:$VR,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,18:82,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,18:83,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,18:84,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,32:85,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,34:86,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,36:87,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,38:88,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,40:89,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,42:90,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,42:91,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,45:92,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,45:93,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,45:94,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,45:95,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,50:96,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,50:97,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,53:98,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,53:99,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,54:$V5,55:$V6,56:100,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,54:$V5,55:$V6,56:101,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,54:$V5,55:$V6,56:102,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},o($VM,[2,51]),o($VM,[2,52]),o($VM,[2,53]),o($VM,[2,54]),{10:104,12:29,13:$V2,14:[1,103],17:$V4,18:10,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,18:105,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{12:106,72:$Ve},{10:107,12:29,13:$V2,17:$V4,18:10,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},o($VM,[2,61]),{19:[1,108],71:$Vj},{14:[1,109]},o($VS,$VN,{13:[1,110],17:$VO,64:$VP}),{9:[1,111]},{9:[1,112]},{9:[1,113]},{13:[1,114]},o([9,13,16,17,27,54,55,61,62,65,67,68,69,70,72,73,74,75],$V0,{4:115}),o($Vk,[2,72]),{19:[1,116]},{31:[1,117]},o($Vm,[2,23],{35:$Vn}),o($Vo,[2,25],{37:$Vp}),o($Vq,[2,27],{39:$Vr}),o($Vs,[2,29],{41:$Vt}),o($Vu,[2,31],{43:$Vv,44:$Vw}),o($Vx,[2,33],{46:$Vy,47:$Vz,48:$VA,49:$VB}),o($Vx,[2,34],{46:$Vy,47:$Vz,48:$VA,49:$VB}),o($VC,[2,36],{51:$VD,52:$VE}),o($VC,[2,37],{51:$VD,52:$VE}),o($VC,[2,38],{51:$VD,52:$VE}),o($VC,[2,39],{51:$VD,52:$VE}),o($VF,[2,41],{54:$VG,55:$VH}),o($VF,[2,42],{54:$VG,55:$VH}),o($VI,[2,44],{57:$VJ,58:$VK,59:$VL}),o($VI,[2,45],{57:$VJ,58:$VK,59:$VL}),o($VM,[2,47]),o($VM,[2,48]),o($VM,[2,49]),o($VM,$VT),{14:[1,118],71:$Vj},{19:[1,119]},o($VM,[2,62]),{14:[1,120],71:$Vj},o($VM,[2,64]),o($VM,[2,66]),{10:121,12:29,13:$V2,14:[1,122],17:$V4,18:10,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),{12:29,13:$V2,17:$V4,18:123,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{5:3,6:4,7:5,8:6,9:$V1,10:8,12:29,13:$V2,16:$V3,17:$V4,18:10,20:30,27:[1,124],28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{20:125,73:$Vf,74:$Vg,75:$Vh},{12:29,13:$V2,17:$V4,20:30,28:126,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},o($VM,$VU),o($VM,[2,59]),o($VM,[2,58]),{14:[1,127],71:$Vj},o($VS,$VT,{15:128,26:$VR}),{14:[1,129]},o([1,9,13,16,17,25,27,54,55,61,62,65,67,68,69,70,72,73,74,75],[2,18]),{12:130,72:$Ve},o($Vl,[2,21]),o($VS,$VU,{15:131,26:$VR}),o($Vi,[2,9]),{15:133,23:132,26:$VR},{9:[1,134]},o($Vi,[2,8]),{24:135,25:[2,17]},o([9,25],[2,15]),o($Vi,[2,10]),{25:[1,136]},{15:133,22:[1,138],23:137,26:$VR},{9:[2,14]},{13:[1,139]},{12:29,13:$V2,17:$V4,18:140,20:30,28:11,29:12,32:13,34:14,36:15,38:16,40:17,42:18,45:19,50:20,53:21,54:$V5,55:$V6,56:22,60:23,61:$V7,62:$V8,63:28,65:$V9,66:33,67:$Va,68:$Vb,69:$Vc,70:$Vd,72:$Ve,73:$Vf,74:$Vg,75:$Vh},{14:[1,141]},{15:133,23:142,26:$VR},{25:[2,16]}],
defaultActions: {137:[2,14],142:[2,16]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* inline comment */
break;
case 1:/* pause comment */
break;
case 2:return ">>"
break;
case 3:return "<<"
break;
case 4:return ">="
break;
case 5:return "<="
break;
case 6:return 54
break;
case 7:return 55
break;
case 8:return 57
break;
case 9:return 58
break;
case 10:return 59
break;
case 11:return "<"
break;
case 12:return ">"
break;
case 13:return "=="
break;
case 14:return "!="
break;
case 15:return "!"
break;
case 16:return "&&"
break;
case 17:return "||"
break;
case 18:return "&"
break;
case 19:return "|"
break;
case 20:return "^"
break;
case 21:return "~"
break;
case 22:return 11
break;
case 23:return 26
break;
case 24:return 27
break;
case 25:return 13
break;
case 26:return 14
break;
case 27:return 71
break;
case 28:return 17
break;
case 29:return 19
break;
case 30:return 68
break;
case 31:return 67
break;
case 32:return 69
break;
case 33:return 70
break;
case 34:return 73
break;
case 35:return 74
break;
case 36:return 75
break;
case 37:return 65
break;
case 38:return 16
break;
case 39:return 22
break;
case 40:return "ELSE"
break;
case 41:return 30
break;
case 42:return 31
break;
case 43:return 64
break;
case 44:return 72
break;
case 45:return 9
break;
case 46:return 9
break;
case 47:/* ignore bad chars */
break;
}
},
rules: [/^(?:#[^\n\r]*)/,/^(?:\.\.\.[^\n^\n]*[\n\r]+)/,/^(?:>>)/,/^(?:<<)/,/^(?:>=)/,/^(?:<=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:~)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:((0|[1-9][0-9]*)\.[0-9]+([eE](\+|-)?[0-9]+)?))/,/^(?:((0|[1-9][0-9]*)([eE](\+|-)?[0-9]+)?))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:bool\b)/,/^(?:_\b)/,/^(?:mem\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\?)/,/^(?::)/,/^(?:\.)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:[\n\r;]+)/,/^(?:$)/,/^(?:[ \t\v\f]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}