/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,3],$V2=[1,9],$V3=[1,17],$V4=[1,15],$V5=[1,16],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,17,29,67,75,76,78,79,80],$Va=[1,22],$Vb=[11,73],$Vc=[2,73],$Vd=[1,53],$Ve=[1,47],$Vf=[1,46],$Vg=[1,48],$Vh=[1,49],$Vi=[1,52],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,63],$Vo=[6,15,20,33,73],$Vp=[6,15,20,32,33,35,73],$Vq=[1,71],$Vr=[6,15,20,32,33,35,37,73],$Vs=[1,72],$Vt=[6,15,20,32,33,35,37,39,73],$Vu=[1,73],$Vv=[6,15,20,32,33,35,37,39,41,73],$Vw=[1,74],$Vx=[6,15,20,32,33,35,37,39,41,43,73],$Vy=[1,75],$Vz=[1,76],$VA=[6,15,20,32,33,35,37,39,41,43,45,46,73],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[6,15,20,32,33,35,37,39,41,43,45,46,48,49,50,51,73],$VG=[1,81],$VH=[1,82],$VI=[6,15,20,32,33,35,37,39,41,43,45,46,48,49,50,51,53,54,73],$VJ=[1,83],$VK=[1,84],$VL=[6,15,20,32,33,35,37,39,41,43,45,46,48,49,50,51,53,54,56,57,73],$VM=[1,85],$VN=[1,86],$VO=[6,15,20,32,33,35,37,39,41,43,45,46,48,49,50,51,53,54,56,57,59,60,73],$VP=[15,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"statements":4,"statement":5,"END":6,"block_definition":7,"memory_declaration":8,"assignment":9,"typed_ids":10,"=":11,"id":12,"(":13,"typed_ids_0":14,")":15,"block":16,"MEM":17,"[":18,"expr":19,"]":20,"type":21,"left_values":22,"if_then_elses":23,"IF":24,"branch":25,"elseifs":26,"ELSE":27,"{":28,"}":29,"conditional_expr":30,"logical_or_expr":31,"?":32,":":33,"logical_and_expr":34,"||":35,"inclusive_or_expr":36,"&&":37,"exclusive_or_expr":38,"|":39,"and_expr":40,"^":41,"equality_expr":42,"&":43,"relational_expr":44,"==":45,"!=":46,"shift_expr":47,"<":48,"<=":49,">":50,">=":51,"additive_expr":52,"<<":53,">>":54,"multiplicative_expr":55,"+":56,"-":57,"unary_expr":58,"*":59,"/":60,"primary_expr":61,"!":62,"~":63,"value":64,"SAMPLERATE":65,"fb_call":66,"ID":67,"VALUE_INT":68,"VALUE_FLOAT":69,"VALUE_TRUE":70,"VALUE_FALSE":71,"exprs":72,",":73,"left_value":74,"INIT":75,"_":76,"typed_id":77,"TYPE_INT32":78,"TYPE_FLOAT32":79,"TYPE_BOOL":80,"$accept":0,"$end":1},
terminals_: {2:"error",6:"END",11:"=",13:"(",15:")",17:"MEM",18:"[",20:"]",24:"IF",27:"ELSE",28:"{",29:"}",32:"?",33:":",35:"||",37:"&&",39:"|",41:"^",43:"&",45:"==",46:"!=",48:"<",49:"<=",50:">",51:">=",53:"<<",54:">>",56:"+",57:"-",59:"*",60:"/",62:"!",63:"~",65:"SAMPLERATE",67:"ID",68:"VALUE_INT",69:"VALUE_FLOAT",70:"VALUE_TRUE",71:"VALUE_FALSE",73:",",75:"INIT",76:"_",78:"TYPE_INT32",79:"TYPE_FLOAT32",80:"TYPE_BOOL"},
productions_: [0,[3,1],[4,2],[4,1],[4,0],[5,1],[5,1],[5,1],[7,7],[8,7],[9,4],[9,4],[9,4],[23,8],[25,1],[26,7],[26,0],[16,3],[19,1],[30,1],[30,5],[31,1],[31,3],[34,1],[34,3],[36,1],[36,3],[38,1],[38,3],[40,1],[40,3],[42,1],[42,3],[42,3],[44,1],[44,3],[44,3],[44,3],[44,3],[47,1],[47,3],[47,3],[52,1],[52,3],[52,3],[55,1],[55,3],[55,3],[58,1],[58,2],[58,2],[58,2],[58,2],[61,1],[61,1],[61,1],[61,3],[61,1],[12,1],[64,1],[64,1],[64,1],[64,1],[66,4],[72,0],[72,1],[72,3],[74,1],[74,4],[74,2],[74,1],[22,1],[22,3],[77,1],[77,2],[10,1],[10,3],[14,0],[21,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
                            this.$ = {
                                name: 'PROGRAM',
                                stmts: $$[$0]
                            }; 
                            return this.$; 
                        
break;
case 2:

                            this.$ = $$[$0-1].concat($$[$0]); 
                        
break;
case 3: case 4:
 this.$ = []; 
break;
case 5: case 6: case 7: case 18: case 19: case 21: case 23: case 25: case 27: case 29: case 39: case 48: case 50: case 53: case 54: case 57: case 73:
 this.$ = $$[$0] 
break;
case 8:

                            this.$ = {
                                name: 'BLOCK_DEFINITION',
                                id: $$[$0-4],
                                inputs: $$[$0-2],
                                outputs: $$[$0-6],
                                statemetns: $$[$0].statements
                            }
                        
break;
case 9:

                            this.$ = {
                                name: 'MEMORY_DEFINITION',
                                type: $$[$0-2],
                                amount: $$[$0-4],
                                id: $$[$0-1]
                            }
                        
break;
case 10:

                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'EXPR',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 11:

                            $$[$0-1].outputs = $$[$0-3]
                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'IF_THEN_ELSE',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 12:

                            $$[$0-1].outputs = $$[$0-3]
                            this.$ = {
                                name: 'ASSIGNMENT',
                                type: 'ANONYMOUS_BLOCK',
                                expr: $$[$0-1],
                                outputs: $$[$0-3]
                            }
                        
break;
case 13:

                            $$[$0-5].condition = $$[$0-5],
                            this.$ = {
                                name: 'IF_THEN_ELSES',
                                branches: [$$[$0-3], $$[$0-2], $$[$0]].flat()
                            }
                        
break;
case 14:

                            this.$ = {
                                name: 'BRANCH',
                                condition: null, // expr or null if else
                                block: $$[$0]
                            }
                        
break;
case 15:

                            $$[$0].condition = $$[$0-2]
                            this.$ = [$$[$0]].concat($$[$01])
                        
break;
case 16: case 64:
 this.$ = [] 
break;
case 17:

                            this.$ = {
                                name: 'BLOCK',
                                statements: $$[$0-1]
                            }
                        
break;
case 20:

                            this.$ = {
                                name: 'INLINE_IF_THEN_ELSE',
                                condition: $$[$0-3],
                                args: [$$[$0-3], $$[$0-1], $$[$01]]
                            }
                        
break;
case 22:

                            this.$ = {
                                name: 'LOGICAL_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 24:

                            this.$ = {
                                name: 'LOGICAL_AND_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 26:

                            this.$ = {
                                name: 'BITWISE_INCLUSIVE_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 28:

                            this.$ = {
                                name: 'BITWISE_EXCLUSIVE_OR_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 30:

                            this.$ = {
                                name: 'BITWISE_AND_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 31: case 34: case 42: case 45: case 67:

                            this.$ = $$[$0]
                        
break;
case 32:

                            this.$ = {
                                name: 'EQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 33:

                            this.$ = {
                                name: 'NOTEQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 35:

                            this.$ = {
                                name: 'LESS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 36:

                            this.$ = {
                                name: 'LESSEQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 37:

                            this.$ = {
                                name: 'GREATER_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 38:

                            this.$ = {
                                name: 'GREATEREQUAL_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 40:

                            this.$ = {
                                name: 'SHIFT_LEFT_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 41:

                            this.$ = {
                                name: 'SHIFT_RIGHT_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 43:

                            this.$ = {
                                name: 'PLUS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 44:

                            this.$ = {
                                name: 'MINUS_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 46:

                            this.$ = {
                                name: 'TIMES_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 47:

                            this.$ = {
                                name: 'DIV_EXPR',
                                args: [$$[$0-2], $$[$0]]
                            }
                        
break;
case 49:

                            this.$ = {
                                name: 'UMINUS_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 51:

                            this.$ = {
                                name: 'LOGICAL_NOT_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 52:

                            this.$ = {
                                name: 'BITWISE_NOT_EXPR',
                                args: [$$[$0]]
                            }
                        
break;
case 55:
 this.$ = { name: 'SAMPLERATE' } 
break;
case 56:
 this.$ = $$[$0-1] 
break;
case 58:
 
                            this.$ = { name: 'ID', value: yytext}; 
                        
break;
case 59:
 
                            this.$ = { name: 'VALUE', type: 'INT', val: parseInt(yytext) };
                        
break;
case 60:
 
                            this.$ = { name: 'VALUE', type: 'FLOAT', val: parseFloat(yytext) };
                        
break;
case 61:
 
                            this.$ = { name: 'VALUE', type:'BOOL', val: true }; 
                        
break;
case 62:
 
                            this.$ = { name: 'VALUE', type:'BOOL' val: false }; 
                        
break;
case 63:

                            this.$ = {
                                name: 'CALL_EXPR',
                                id: $$[$0-3],
                                args: $$[$0-1]
                            }
                        
break;
case 65: case 71: case 75:
 this.$ = [$$[$0]] 
break;
case 66:
 
                            this.$ = $$[$0-2].concat($$[$0]) 
                        
break;
case 68:

                            $$[$0-3].index = $$[$0-1]
                            this.$ = $$[$0-3]
                        
break;
case 69:

                            $$[$0].init = true
                            this.$ = $$[$0]
                        
break;
case 70:

                            this.$ = { name: 'ID', value: '_' }
                        
break;
case 72: case 76:

                            this.$ = $$[$0-2].concat($$[$0])
                        
break;
case 74:

                            $$[$0].declaredType = $$[$0-1]
                            this.$ = $$[$0]
                        
break;
case 77:
 this.$ = [] }
                    | typed_ids
                        {{ this.$ = $$[$0] 
break;
case 78:

                            this.$ = {
                                name: 'TYPE',
                                value: 'INT32'
                            }
                        
break;
case 79:

                            this.$ = {
                                name: 'TYPE',
                                value: 'FLOAT32'
                            }
                        
break;
case 80:

                            this.$ = {
                                name: 'TYPE',
                                value: 'BOOL'
                            }
                        
break;
}
},
table: [o([1,17,67,75,76,78,79,80],$V0,{3:1,4:2,6:$V1}),{1:[3]},{1:[2,1],5:4,7:5,8:6,9:7,10:8,12:13,17:$V2,21:14,22:10,67:$V3,74:12,75:$V4,76:$V5,77:11,78:$V6,79:$V7,80:$V8},o($V9,[2,3]),o($V9,[2,2]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),{11:[1,21],73:$Va},{18:[1,23]},{11:[1,24],73:[1,25]},o($Vb,[2,75]),o($Vb,[2,71]),o($Vb,$Vc,{18:[1,26]}),{12:27,67:$V3},{12:28,67:$V3},o($Vb,[2,70]),o([6,11,13,15,18,20,32,33,35,37,39,41,43,45,46,48,49,50,51,53,54,56,57,59,60,73],[2,58]),{67:[2,78]},{67:[2,79]},{67:[2,80]},{12:29,67:$V3},{12:31,21:14,67:$V3,77:30,78:$V6,79:$V7,80:$V8},{12:50,13:$Vd,19:32,30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,16:61,19:59,23:60,24:[1,62],28:$Vn,30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{10:65,12:13,21:14,67:$V3,74:64,75:$V4,76:$V5,77:11,78:$V6,79:$V7,80:$V8},{12:50,13:$Vd,19:66,30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},o($Vb,[2,74]),o($Vb,[2,69]),{13:[1,67]},o($Vb,[2,76]),o($Vb,$Vc),{20:[1,68]},o($Vo,[2,18]),o($Vo,[2,19],{32:[1,69],35:[1,70]}),o($Vp,[2,21],{37:$Vq}),o($Vr,[2,23],{39:$Vs}),o($Vt,[2,25],{41:$Vu}),o($Vv,[2,27],{43:$Vw}),o($Vx,[2,29],{45:$Vy,46:$Vz}),o($VA,[2,31],{48:$VB,49:$VC,50:$VD,51:$VE}),o($VF,[2,34],{53:$VG,54:$VH}),o($VI,[2,39],{56:$VJ,57:$VK}),o($VL,[2,42],{59:$VM,60:$VN}),o($VO,[2,45]),o($VO,[2,48]),{12:50,13:$Vd,61:87,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,61:88,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,61:89,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,61:90,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},o($VO,[2,53],{13:[1,91]}),o($VO,[2,54]),o($VO,[2,55]),{12:50,13:$Vd,19:92,30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},o($VO,[2,57]),o($VO,[2,59]),o($VO,[2,60]),o($VO,[2,61]),o($VO,[2,62]),{6:[1,93]},{6:[1,94]},{6:[1,95]},{13:[1,96]},o([17,29,67,75,76,78,79,80],$V0,{4:97,6:$V1}),o($Vb,[2,72]),{11:[2,67],73:$Va},{20:[1,98]},{14:99,15:[2,77]},{21:100,78:$V6,79:$V7,80:$V8},{12:50,13:$Vd,19:101,30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,34:102,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,36:103,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,38:104,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,40:105,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,42:106,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,44:107,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,44:108,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,47:109,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,47:110,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,47:111,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,47:112,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,52:113,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,52:114,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,55:115,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,55:116,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,56:$Ve,57:$Vf,58:117,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{12:50,13:$Vd,56:$Ve,57:$Vf,58:118,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,52]),o($VP,[2,64],{30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,58:44,61:45,12:50,64:51,66:54,72:119,19:120,13:$Vd,56:$Ve,57:$Vf,62:$Vg,63:$Vh,65:$Vi,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm}),{15:[1,121]},o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),{12:50,13:$Vd,19:122,30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{5:4,7:5,8:6,9:7,10:8,12:13,17:$V2,21:14,22:10,29:[1,123],67:$V3,74:12,75:$V4,76:$V5,77:11,78:$V6,79:$V7,80:$V8},o($Vb,[2,68]),{15:[1,124]},{12:125,67:$V3},{33:[1,126]},o($Vp,[2,22],{37:$Vq}),o($Vr,[2,24],{39:$Vs}),o($Vt,[2,26],{41:$Vu}),o($Vv,[2,28],{43:$Vw}),o($Vx,[2,30],{45:$Vy,46:$Vz}),o($VA,[2,32],{48:$VB,49:$VC,50:$VD,51:$VE}),o($VA,[2,33],{48:$VB,49:$VC,50:$VD,51:$VE}),o($VF,[2,35],{53:$VG,54:$VH}),o($VF,[2,36],{53:$VG,54:$VH}),o($VF,[2,37],{53:$VG,54:$VH}),o($VF,[2,38],{53:$VG,54:$VH}),o($VI,[2,40],{56:$VJ,57:$VK}),o($VI,[2,41],{56:$VJ,57:$VK}),o($VL,[2,43],{59:$VM,60:$VN}),o($VL,[2,44],{59:$VM,60:$VN}),o($VO,[2,46]),o($VO,[2,47]),{15:[1,127],73:[1,128]},o($VP,[2,65]),o($VO,[2,56]),{15:[1,129]},o([1,6,17,27,29,67,75,76,78,79,80],[2,17]),{16:130,28:$Vn},{6:[1,131]},{12:50,13:$Vd,30:132,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},o($VO,[2,63]),{12:50,13:$Vd,19:133,30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{16:135,25:134,28:$Vn},o($V9,[2,8]),o($V9,[2,9]),o($Vo,[2,20]),o($VP,[2,66]),{26:136,27:[2,16]},o([6,27],[2,14]),{27:[1,137]},{16:135,24:[1,139],25:138,28:$Vn},{6:[2,13]},{13:[1,140]},{12:50,13:$Vd,19:141,30:33,31:34,34:35,36:36,38:37,40:38,42:39,44:40,47:41,52:42,55:43,56:$Ve,57:$Vf,58:44,61:45,62:$Vg,63:$Vh,64:51,65:$Vi,66:54,67:$V3,68:$Vj,69:$Vk,70:$Vl,71:$Vm},{15:[1,142]},{16:135,25:143,28:$Vn},{27:[2,15]}],
defaultActions: {18:[2,78],19:[2,79],20:[2,80],138:[2,13],143:[2,15]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* inline comment */
break;
case 1:/* pause comment */
break;
case 2:return 56
break;
case 3:return 57
break;
case 4:return 59
break;
case 5:return 60
break;
case 6:return '%'
break;
case 7:return ">="
break;
case 8:return "<="
break;
case 9:return "<"
break;
case 10:return ">"
break;
case 11:return "=="
break;
case 12:return "!="
break;
case 13:return "!"
break;
case 14:return "&&"
break;
case 15:return "||"
break;
case 16:return "&"
break;
case 17:return "|"
break;
case 18:return "^"
break;
case 19:return ">>"
break;
case 20:return "<<"
break;
case 21:return "~"
break;
case 22:return 11
break;
case 23:return 28
break;
case 24:return 29
break;
case 25:return 13
break;
case 26:return 15
break;
case 27:return 73
break;
case 28:return 18
break;
case 29:return 20
break;
case 30:return 68
break;
case 31:return 69
break;
case 32:return 70
break;
case 33:return 71
break;
case 34:return 78
break;
case 35:return 79
break;
case 36:return 80
break;
case 37:return 76
break;
case 38:return 17
break;
case 39:return 65
break;
case 40:return 24
break;
case 41:return "ELSE"
break;
case 42:return 32
break;
case 43:return 33
break;
case 44:return 75
break;
case 45:return 67
break;
case 46:return 6
break;
case 47:/* ignore bad chars */
break;
}
},
rules: [/^(?:#[^\n\r]*)/,/^(?:\.\.\.[^\n^\n]*[\n\r]+)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:>>)/,/^(?:<<)/,/^(?:~)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\[)/,/^(?:\])/,/^(?:{int})/,/^(?:((0|[1-9][0-9]*)\.[0-9]+{e}?))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:bool\b)/,/^(?:_\b)/,/^(?:mem\b)/,/^(?:fs\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\?)/,/^(?::)/,/^(?:@)/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*))/,/^(?:[\n\r;]+)/,/^(?:[ \t\v\f]+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}